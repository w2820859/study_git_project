89.8在check中增加部分
 
//STARTING: Fast Track WP4989 CA Scell config/deconfig via A2/A4 REDO WP4007
//init local var
// PCell------------------------------------------------------------------------
bool isMfbiSupported = ueCtxtDataPtr->getUehCommonDataPtr()->getOptionalFeaturesPtr()->isServiceStateOperable(ELIB_CONST_LICENSE_MULTI_FREQ_BAND_ID);
RnhNCellEUtranGenericFrequencyD pCellGenericFrequency;
RnhNCellFreqBandUtilD::getSourceCellGenericFrequency(ueCtxtDataPtr->getCellDataPtr()->getConfigurationDataPtr()->getservingEUtranGenericCell(), pCellGenericFrequency);
U32 pCellUeEarfcn = RnhNCellFreqBandUtilD::getUeEarfcn(eutranCapabilitiesPtr, &pCellGenericFrequency, isMfbiSupported);
bool isTddSCell = false;
U32VectorD ueCaSupportedBandList;
U32 pCellUeFreqBand = eutranCapabilitiesPtr->getCaSupportedBands(pCellUeEarfcn, ueCaSupportedBandList);
if(ueCaSupportedBandList.empty())
{
  return false;
}
 
const RnhRadioConfConfigurationDataPtrD momDataPtr= ueCtxtDataPtr->getCellDataPtr()->getConfigurationDataPtr();
U32 pCellBandwidth = RnhNCellUtilD::getEutranNdlBandWidth(momDataPtr->getservingEUtranGenericCell());
S32 noOfChannelSelectionSets = momDataPtr->getservingEUtranGenericCell()->noOfChannelSelectionSets;
 
ELIB_TRACE_UE_LEVEL2(ueCtxtDataPtr->getUeTraceHandlerPtr(),
                        ueCtxtDataPtr->getRacUeRef(),
                        Ft_CARRIER_AGGREGATION,
                        "checkSCellCandidate: ServingCell earfcn %d, bandWidth %d, Band %d.",
                        pCellUeEarfcn,
                        pCellBandwidth,
                        pCellUeFreqBand);
 
if(pCellBandwidth < 5000 || noOfChannelSelectionSets <= 0)
{
  //pcell bandwidth less than 5MHz, no sCell candidate should be found
  ELIB_TRACE_UE_LEVEL2(ueCtxtDataPtr->getUeTraceHandlerPtr(),
                          ueCtxtDataPtr->getRacUeRef(),
                          uehUeBl_SCellEvalSwU,
                          "checkSCellCandidate: Pcell bandwidth less than 5MHz or "
                          "noOfChannelSelectionSets is not set, no sCell candidate should be found. "
                          "Pcell bandwidth = %d.noOfChannelSelectionSets = %d", pCellBandwidth, noOfChannelSelectionSets);
  return false;
}
 
U32 servingCellId = ueCtxtDataPtr->getCellDataPtr()->getCellId();
U32 servingCellDuId = ueCtxtDataPtr->getCellDataPtr()->getServingCellHandlerPtr()->getDuId(servingCellId);
// PCell end------------------------------------------------------------------------
 
// Cross Du License --------------------------------------------------------------------------------------------------------------------------------------
bool isCrossDuSupported = caLicenseManagerPtr->isCrossDuCaLicenseEnabled();
// END init local var
//ENDING: Fast Track WP4989
 
 
// SCell--------------------------------------------------------------------------------------
const RnhNCellEUtranCellGenericInfoIfD* sCellInfoPtr =
  ueCtxtDataPtr->getFreqInfo().getLookupByCgiHandler()->getEUtranCellInfo(servingCellId, inCellIter->cgi);
    
// Cross Du ---------------------------------------------------------------------------------------------------------
U32 sCellDuId = ueCtxtDataPtr->getCellDataPtr()->getServingCellHandlerPtr()->getDuId(inCellIter->cgi.eNodeBCellId.cellId);
    
// ------------------------------------------------------------------------------------------------------------------
  
if ((!sCellInfoPtr->getHasRelation(servingCellId)) ||
    (!sCellSelectionPolicyCommonPtr->isSCellCandidateValid(sCellInfoPtr)))
{
  return false;
}
 
// Further filter potential SCell based on Cross DU License
if (!isCrossDuSupported)
{
  // No Cross Du license
  // Ensure that this potential SCell candidate is on the same DU as the ServingCell
    
  if (servingCellDuId != sCellDuId)
  {
    // ServingCell and Scell are not on the same DU, skip this SCell
    
    ELIB_TRACE_UE_LEVEL2(
      ueCtxtDataPtr->getUeTraceHandlerPtr(),
      ueCtxtDataPtr->getRacUeRef(),
      Ft_CARRIER_AGGREGATION,
      "checkSCellCandidate: Skipping SCell %d. ServingCell %d Du Id = %d  SCell Du Id = %d",
      inCellIter->cgi.eNodeBCellId.cellId,
      servingCellId,
      servingCellDuId,
      sCellDuId);
        
    return false;
  }
}
else
{
  // Cross Du license Enabled
  // Ensure that there are no cases where the ServingCell or Scell is on Du > 2 and the other is on a different Du
  // This else condition can be removed in the future when we allow CA across any DU.
 
  if ((servingCellDuId > 2) || (sCellDuId > 2))
  {
    if (servingCellDuId != sCellDuId)
    {
      // ServingCell and Scell are not on the same DU, skip this SCell
 
      ELIB_TRACE_UE_LEVEL2(
         ueCtxtDataPtr->getUeTraceHandlerPtr(),
         ueCtxtDataPtr->getRacUeRef(),
         Ft_CARRIER_AGGREGATION,
         "checkSCellCandidate: Skipping SCell %d. ServingCell %d Du Id = %d  SCell Du Id = %d",
         inCellIter->cgi.eNodeBCellId.cellId,
         servingCellId,
         servingCellDuId,
         sCellDuId);
    
      return false;
    }
  }
}
    
ELIB_TRACE_UE_LEVEL2(ueCtxtDataPtr->getUeTraceHandlerPtr(),
                        ueCtxtDataPtr->getRacUeRef(),
                        Ft_CARRIER_AGGREGATION,
                        "checkSCellCandidate: scell Barred %d, scell DlOnly %d, Dl Supplementary SCell License service state %d.",
                        sCellInfoPtr->getCellBarred(),
                        sCellInfoPtr->getIsDlOnly(),
                        caLicenseManagerPtr->checkDlSupplemntaryScellLicense());
 
if ((sCellInfoPtr->getCellBarred() == 0) ||
    (sCellInfoPtr->getIsDlOnly() == 1))
{
  // cell is Barred or DlOnly
  if (!caLicenseManagerPtr->checkDlSupplemntaryScellLicense())
  {
    // Dl only License is not OPEARABLE
    return false;
  }
}
 
if (sCellInfoPtr->getSCellCandidate(servingCellId) == 1)
{
  S32 sCellTxModeConfigureInMom = sCellInfoPtr->getConfiguredTxMode();
  S16 sCellTxMode;
  S32 sCellNoOfUsedTxAntenna =
    ueCtxtDataPtr->getCellDataPtr()->getServingCellHandlerPtr()->getNoOfUsedTxAntennas(inCellIter->cgi.eNodeBCellId.cellId);
      
  if (momDataPtr->getservingEUtranGenericCell()->froType == ELIB_CONST_EUTRANCELLFDD_FRO_TYPE)
  {
    //FDD PCell
    ELIB_TRACE_UE_LEVEL2(ueCtxtDataPtr->getUeTraceHandlerPtr(),
                            ueCtxtDataPtr->getRacUeRef(),
                            Ft_CARRIER_AGGREGATION,
                            "checkSCellCandidate: ServingCell is FDD.");
          
    if(sCellInfoPtr->getCellFroRef().getFroType() == ELIB_CONST_EUTRANCELLFDD_FRO_TYPE)
    {
      //FDD sCell
      ELIB_TRACE_UE_LEVEL2(ueCtxtDataPtr->getUeTraceHandlerPtr(),
                               ueCtxtDataPtr->getRacUeRef(),
                               Ft_CARRIER_AGGREGATION,
                               "checkSCellCandidate: SCell is FDD.");
 
      // PCell is FDD, SCell is FDD.
      if(sCellSelectionPolicyCommonPtr->initialFddPcellFddScellTxModeCalculation(sCellTxMode, sCellTxModeConfigureInMom, sCellNoOfUsedTxAntenna))
      {
         sCellTxModeConfigureInMom = sCellTxMode;
         isTddSCell = false;
      }
      else
      {
         // sCellTxMode is not valid
         return false;
      }
    }
    else if(sCellInfoPtr->getCellFroRef().getFroType() == ELIB_CONST_EUTRANCELLTDD_FRO_TYPE)
    {
      //TDD sCell
      ELIB_TRACE_UE_LEVEL2(ueCtxtDataPtr->getUeTraceHandlerPtr(),
                               ueCtxtDataPtr->getRacUeRef(),
                               Ft_CARRIER_AGGREGATION,
                               "checkSCellCandidate: SCell is TDD. FDD TDD CA license service state %d",
                               ueCtxtDataPtr->isLicenseOperable(ELIB_CONST_LICENSE_CARRIER_AGGREGATION_FDD_TDD_ID));
          
      if(ueCtxtDataPtr->isLicenseOperable(ELIB_CONST_LICENSE_CARRIER_AGGREGATION_FDD_TDD_ID) == false)
      {
         // FDD TDD CA license service state is not OPERABLE.
         // NO TDD SCell when PCell is FDD
         return false;
      }
      else
      {
         // PCell is FDD, SCell is TDD.
        if(sCellSelectionPolicyCommonPtr->initialFddPcellTddScellTxModeCalculation(sCellTxMode, sCellTxModeConfigureInMom, sCellNoOfUsedTxAntenna))
         {
           sCellTxModeConfigureInMom = sCellTxMode;
           // SCell is TDD
           isTddSCell = true; 
         }
         else
         {
           // sCellTxMode is not valid
           return false;
         }
      }
    }
  }    
  else if (momDataPtr->getservingEUtranGenericCell()->froType == ELIB_CONST_EUTRANCELLTDD_FRO_TYPE)
  {
    //CmccFastTrack WP4913 start
    if (sCellInfoPtr->getCellFroRef().getFroType() == ELIB_CONST_EUTRANCELLTDD_FRO_TYPE)
    {
      // PCell is TDD, SCell is TDD
      if(sCellSelectionPolicyCommonPtr->initialTddPcellTddScellTxModeCalculation(sCellTxMode, sCellTxModeConfigureInMom, sCellNoOfUsedTxAntenna))
      {
        // valid TDD SCell Tx Mode
        sCellTxModeConfigureInMom = sCellTxMode;
      }
      else
      {
        // sCellTxMode is not valid
        // Move to next SCell candidate.
        return false;
      }
 
      // SCell is TDD
      isTddSCell = true;
    }
    else if (sCellInfoPtr->getCellFroRef().getFroType() == ELIB_CONST_EUTRANCELLFDD_FRO_TYPE)
    {
      //TDD sCell
      ELIB_TRACE_UE_LEVEL2(ueCtxtDataPtr->getUeTraceHandlerPtr(),
                           ueCtxtDataPtr->getRacUeRef(),
                           Ft_CARRIER_AGGREGATION,
                           "findCandidateScell: SCell is FDD. TDD FDD CA SC %d",
                           ueCtxtDataPtr->getSysConstValue(SYS_CONST_CMCC_FT_FDD_TDD_CA_TDD_AS_PCELL_ENABLED_ID));
      if(ueCtxtDataPtr->getSysConstValue(SYS_CONST_CMCC_FT_FDD_TDD_CA_TDD_AS_PCELL_ENABLED_ID) == 0)
      {
        // TDD FDD CA SC is 0.
        // NO FDD SCell when PCell is TDD
        return false;
      }
      else
      {
        // PCell is TDD, SCell is FDD.
        if (sCellSelectionPolicyCommonPtr->initialTddPcellFddScellTxModeCalculation(sCellTxMode, sCellTxModeConfigureInMom, sCellNoOfUsedTxAntenna))
        {
          sCellTxModeConfigureInMom = sCellTxMode;
        }
        else
        {
          // sCellTxMode is not valid
          // Move to next SCell candidate.
          return false;
        }
      }
     
    }
    //CmccFastTrack WP4913 end
  }//wp3600 support TM3/TM8 for TDD end
 
  U32 sCellBandwidth = sCellInfoPtr->getChannelBandwidth();
  if (sCellBandwidth < 5000)
  {
    ELIB_TRACE_UE_LEVEL2(ueCtxtDataPtr->getUeTraceHandlerPtr(),
                            ueCtxtDataPtr->getRacUeRef(),
                            uehUeBl_SCellEvalSwU,
                            "checkSCellCandidate: SCell bandwidth is less than 5MHz. "
                            "SCellId %d  can't be SCell candidate. bandwidth is %d.",inCellIter->cgi.eNodeBCellId.cellId, sCellBandwidth);
    return false;
  }
  RnhRadioConfEUtranGenericCellIfD* pCellEUtranGenericCellPtr = ueCtxtDataPtr->getCellDataPtr()->getConfigurationDataPtr()->getservingEUtranGenericCell();
  RnhNCellEUtranGenericFrequencyRangeD pCellGenericFrequencyRange(&pCellGenericFrequency, RnhNCellUtilD::getEutranNdlBandWidth(pCellEUtranGenericCellPtr));
  RnhNCellEUtranGenericFrequencyRangeD sCellGenericFrequencyRange(sCellInfoPtr->getGenericFrequency(), sCellInfoPtr->getChannelBandwidth());
 
  U32 sCellUeFreqBand = RnhNCellFreqBandUtilD::getCarrierAggregationSCellUeFreqBand(eutranCapabilitiesPtr,
                                                                                                 &pCellGenericFrequencyRange,
                                                                                                 &sCellGenericFrequencyRange,
                                                                                                 ueCtxtDataPtr->getSysConstValue(SYS_CONST_DISABLE_CA_BW_COMBINATION_ID),
                                                                                                 ueCtxtDataPtr->getSysConstValue(SYS_CONST_CMCC_FT_ENABLE_MFBI_CA_ID),
                                                                                                 isMfbiSupported);
 
  if (sCellUeFreqBand != RnhNCellFreqInfoConstantsD::RNH_NCELL_FREQ_INFO_CONSTANTS_BAND_UNDEFINED)
  {
    U32 sCellUeEarfcn = RnhNCellFreqBandUtilD::getCarrierAggregationSCellUeEarfcn(eutranCapabilitiesPtr,
                                                                                               &pCellGenericFrequencyRange,
                                                                                               &sCellGenericFrequencyRange,
                                                                                               ueCtxtDataPtr->getSysConstValue(SYS_CONST_DISABLE_CA_BW_COMBINATION_ID),
                                                                                               ueCtxtDataPtr->getSysConstValue(SYS_CONST_CMCC_FT_ENABLE_MFBI_CA_ID),
                                                                                               isMfbiSupported);
    //Disable lint info "Expression involving variable 'Symbol' possibly depends on order of evaluation"
    // inter band aggregation OR intra band aggregation
    if(((sCellUeFreqBand != pCellUeFreqBand) &&
         (eutranCapabilitiesPtr->isUlBandAggregationSupported(pCellUeFreqBand))) ||
       (((sCellUeFreqBand == pCellUeFreqBand) &&
         (pCellUeEarfcn != sCellUeEarfcn))))
    {
      outCandidateListItem.cellId = inCellIter->cgi.eNodeBCellId.cellId;
      outCandidateListItem.phyCellId = sCellInfoPtr->getPci();
      outCandidateListItem.nCellFreq = sCellUeEarfcn;
      outCandidateListItem.nCellBandWidth = sCellBandwidth;
      outCandidateListItem.sCellCgi = inCellIter->cgi;
      outCandidateListItem.sCellFreqId = inFreqIter->freqId;
      outCandidateListItem.action = UEH_COMMON_SCELL_ACTION_CONFIGURING;
      outCandidateListItem.configuredTxMode = sCellTxModeConfigureInMom;
      outCandidateListItem.sCellIndex = 1;
      outCandidateListItem.isTddSCell = isTddSCell;
      UehCommonCtxtScellCandidateVectorD candidateList;
      candidateList.push_back(outCandidateListItem);
 
      ELIB_TRACE_UE_LEVEL2(
         ueCtxtDataPtr->getUeTraceHandlerPtr(),
         ueCtxtDataPtr->getRacUeRef(),
         Ft_CARRIER_AGGREGATION,
         "checkSCellCandidate found scellID %d CGI =%s freqId %d",
         outCandidateListItem.cellId, inCellIter->cgi.toDecimal().c_str(),
         inFreqIter->freqId);
      // find an SCell. Exit
      return true;
 
    }
  } //   sCellUeFreqBand != RnhNCellFreqInfoConstantsD
}  // getSCellCandidate(servingCellId) == 1
 
return false;